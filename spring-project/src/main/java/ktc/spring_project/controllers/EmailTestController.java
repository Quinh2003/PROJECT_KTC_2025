package ktc.spring_project.controllers;

import ktc.spring_project.dtos.common.ApiResponse;
import ktc.spring_project.services.EmailService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

/**
 * Controller ƒë·ªÉ test ch·ª©c nƒÉng email
 * CH·ªà s·ª≠ d·ª•ng trong m√¥i tr∆∞·ªùng development/testing
 */
@RestController
@RequestMapping("/api/test/email")
@Slf4j
public class EmailTestController {

    @Autowired
    private EmailService emailService;

    /**
     * Test g·ª≠i email ƒë∆°n gi·∫£n ƒë·ªÉ ki·ªÉm tra c·∫•u h√¨nh
     * GET /api/test/email/send-test?email=test@example.com
     */
    @GetMapping("/send-test")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<ApiResponse<String>> sendTestEmail(@RequestParam String email) {
        try {
            log.info("üß™ TEST: G·ª≠i test email ƒë·∫øn: {}", email);
            
            boolean result = emailService.sendTestEmail(email);
            
            if (result) {
                return ResponseEntity.ok(ApiResponse.success(
                    "Email test ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng ƒë·∫øn: " + email,
                    "Test email th√†nh c√¥ng"
                ));
            } else {
                return ResponseEntity.badRequest().body(ApiResponse.error(
                    "Kh√¥ng th·ªÉ g·ª≠i test email. Ki·ªÉm tra c·∫•u h√¨nh email."
                ));
            }
            
        } catch (Exception e) {
            log.error("L·ªói khi g·ª≠i test email: ", e);
            return ResponseEntity.internalServerError().body(ApiResponse.error(
                "L·ªói h·ªá th·ªëng: " + e.getMessage()
            ));
        }
    }

    /**
     * Ki·ªÉm tra tr·∫°ng th√°i email service
     * GET /api/test/email/status
     */
    @GetMapping("/status")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<ApiResponse<Object>> checkEmailServiceStatus() {
        try {
            boolean isAvailable = emailService.isEmailServiceAvailable();
            
            java.util.Map<String, Object> status = new java.util.HashMap<>();
            status.put("available", isAvailable);
            status.put("timestamp", new java.util.Date());
            status.put("message", isAvailable ? 
                "Email service ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng" : 
                "Email service kh√¥ng kh·∫£ d·ª•ng");
            
            return ResponseEntity.ok(ApiResponse.success(status, "Ki·ªÉm tra tr·∫°ng th√°i email service"));
            
        } catch (Exception e) {
            log.error("L·ªói khi ki·ªÉm tra email service: ", e);
            return ResponseEntity.internalServerError().body(ApiResponse.error(
                "L·ªói h·ªá th·ªëng: " + e.getMessage()
            ));
        }
    }
}

