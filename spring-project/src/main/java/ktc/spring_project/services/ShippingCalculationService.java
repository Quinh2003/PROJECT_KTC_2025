package ktc.spring_project.services;

import ktc.spring_project.dtos.ShippingCalculationRequest;
import ktc.spring_project.dtos.ShippingFeeBreakdown;
import ktc.spring_project.enums.ServiceType;
import org.springframework.stereotype.Service;

import java.math.BigDecimal;
import java.math.RoundingMode;

@Service
public class ShippingCalculationService {

    // ƒê∆°n gi√° c∆° b·∫£n - C·∫¨P NH·∫¨T THEO B·∫¢NG GI√Å M·ªöI
    private static final BigDecimal WEIGHT_RATE_PER_KG = new BigDecimal("5000"); // 5,000 VNƒê/kg (GI·∫¢M GI√Å)
    private static final BigDecimal VOLUME_DIVISOR = new BigDecimal("5000"); // Chia 5000 ƒë·ªÉ t√≠nh tr·ªçng l∆∞·ª£ng quy ƒë·ªïi

    // Ph√≠ c∆° b·∫£n theo v√πng - B·∫¢NG GI√Å M·ªöI 
    private static final BigDecimal INNER_CITY_BASE_FEE = new BigDecimal("15000"); // 15,000 VNƒê
    private static final BigDecimal SUBURBAN_BASE_FEE = new BigDecimal("25000"); // 25,000 VNƒê  
    private static final BigDecimal INTER_PROVINCIAL_BASE_FEE = new BigDecimal("40000"); // 40,000 VNƒê

    // ƒê∆°n gi√° theo km - B·∫¢NG GI√Å M·ªöI (GI·∫¢M GI√Å) 
    private static final BigDecimal INNER_CITY_RATE_PER_KM = new BigDecimal("1800"); // 1,800 VNƒê/km
    private static final BigDecimal SUBURBAN_RATE_PER_KM = new BigDecimal("1500"); // 1,500 VNƒê/km
    private static final BigDecimal INTER_PROVINCIAL_RATE_PER_KM = new BigDecimal("500"); // 500 VNƒê/km (gi·∫£m t·ª´ 1,000)

    // H·ªá s·ªë r·ªßi ro cho h√†ng d·ªÖ v·ª°
    private static final BigDecimal FRAGILE_MULTIPLIER = new BigDecimal("1.3");
    private static final BigDecimal NORMAL_MULTIPLIER = new BigDecimal("1.0");

    /**
     * T√≠nh t·ªïng ph√≠ shipping cho order item - PHI√äN B·∫¢N ƒê∆†N GI·∫¢N
     * CH·ªà T√çNH THEO TR·ªåNG L∆Ø·ª¢NG, TH·ªÇ T√çCH V√Ä H·ªÜ S·ªê R·ª¶I RO
     * KH√îNG t√≠nh kho·∫£ng c√°ch v√† ServiceType
     * C√îNG TH·ª®C: T·ªîNG PH√ç = MAX(Tr·ªçng l∆∞·ª£ng th·ª±c t·∫ø, Tr·ªçng l∆∞·ª£ng quy ƒë·ªïi) √ó 5,000 √ó H·ªÜ S·ªê R·ª¶I RO √ó S·ªê L∆Ø·ª¢NG
     * 
     * @param request ShippingCalculationRequest ch·ª©a th√¥ng tin c·∫ßn thi·∫øt
     * @return ShippingFeeBreakdown ch·ª©a chi ti·∫øt t√≠nh ph√≠
     */
    public ShippingFeeBreakdown calculateShippingFee(ShippingCalculationRequest request) {
        // 1. T√≠nh tr·ªçng l∆∞·ª£ng quy ƒë·ªïi t·ª´ th·ªÉ t√≠ch
        BigDecimal volumeWeight = calculateVolumeWeight(request);
        
        // 2. Tr·ªçng l∆∞·ª£ng t√≠nh ph√≠ = MAX(tr·ªçng l∆∞·ª£ng th·ª±c t·∫ø, tr·ªçng l∆∞·ª£ng quy ƒë·ªïi)
        BigDecimal billableWeight = request.getActualWeight().max(volumeWeight);
        
        // 3. Ph√≠ c∆° b·∫£n = tr·ªçng l∆∞·ª£ng t√≠nh ph√≠ √ó ƒë∆°n gi√°
        BigDecimal baseFee = billableWeight.multiply(WEIGHT_RATE_PER_KG);

        // 4. H·ªá s·ªë r·ªßi ro (C√ì fragile, KH√îNG c√≥ ServiceType)
        BigDecimal riskMultiplier = getRiskMultiplier(request.isFragile());

        // 5. T·ªïng ph√≠ = ph√≠ c∆° b·∫£n √ó h·ªá s·ªë r·ªßi ro √ó s·ªë l∆∞·ª£ng
        BigDecimal totalFee = baseFee.multiply(riskMultiplier).multiply(new BigDecimal(request.getQuantity()));

        // 6. T·∫°o chu·ªói m√¥ t·∫£ chi ti·∫øt t√≠nh to√°n
        String calculationDetails = buildSimpleCalculationDetails(request, billableWeight, volumeWeight, baseFee, riskMultiplier, totalFee);

        return ShippingFeeBreakdown.builder()
                .baseFee(baseFee)
                .weightFee(baseFee)
                .distanceFee(BigDecimal.ZERO)
                .riskMultiplier(riskMultiplier)
                .serviceMultiplier(BigDecimal.ONE)
                .totalFee(totalFee)
                .distance(BigDecimal.ZERO)
                .billableWeight(billableWeight)
                .volumeWeight(volumeWeight)
                .calculationDetails(calculationDetails)
                .build();
    }

    /**
     * T√≠nh ph√≠ d·ª±a tr√™n tr·ªçng l∆∞·ª£ng
     * Ph√≠ tr·ªçng l∆∞·ª£ng = Tr·ªçng l∆∞·ª£ng t√≠nh ph√≠ √ó 5,000 VNƒê/kg
     * Tr·ªçng l∆∞·ª£ng t√≠nh ph√≠ = MAX(Tr·ªçng l∆∞·ª£ng th·ª±c t·∫ø, Tr·ªçng l∆∞·ª£ng quy ƒë·ªïi)
     */
    private BigDecimal calculateWeightBasedFee(ShippingCalculationRequest request) {
        BigDecimal volumeWeight = calculateVolumeWeight(request);
        BigDecimal billableWeight = request.getActualWeight().max(volumeWeight);
        return billableWeight.multiply(WEIGHT_RATE_PER_KG);
    }

    /**
     * T√≠nh tr·ªçng l∆∞·ª£ng quy ƒë·ªïi t·ª´ th·ªÉ t√≠ch
     * Tr·ªçng l∆∞·ª£ng quy ƒë·ªïi = Volume √∑ 5000
     */
    private BigDecimal calculateVolumeWeight(ShippingCalculationRequest request) {
        if (request.getVolume() == null || request.getVolume().compareTo(BigDecimal.ZERO) <= 0) {
            return BigDecimal.ZERO;
        }
        
        return request.getVolume().divide(VOLUME_DIVISOR, 2, RoundingMode.HALF_UP);
    }

    /**
     * T√≠nh ph√≠ d·ª±a tr√™n kho·∫£ng c√°ch v·ªõi c√¥ng th·ª©c ƒë∆°n gi·∫£n
     * Ph√≠ kho·∫£ng c√°ch = Kho·∫£ng c√°ch √ó ƒê∆°n gi√°/km + Ph√≠ c∆° b·∫£n v√πng
     */
    private BigDecimal calculateDistanceBasedFee(ShippingCalculationRequest request) {
        BigDecimal distance = request.getDistance();
        BigDecimal baseFee;
        BigDecimal ratePerKm;

        if (distance.compareTo(new BigDecimal("15")) <= 0) {
            // N·ªôi th√†nh: 0-15km
            baseFee = INNER_CITY_BASE_FEE;
            ratePerKm = INNER_CITY_RATE_PER_KM;
        } else if (distance.compareTo(new BigDecimal("50")) <= 0) {
            // Ngo·∫°i th√†nh: 15-50km
            baseFee = SUBURBAN_BASE_FEE;
            ratePerKm = SUBURBAN_RATE_PER_KM;
        } else {
            // Li√™n t·ªânh: >50km
            baseFee = INTER_PROVINCIAL_BASE_FEE;
            ratePerKm = INTER_PROVINCIAL_RATE_PER_KM;
        }

        // C√¥ng th·ª©c: Ph√≠ c∆° b·∫£n + (Kho·∫£ng c√°ch √ó ƒê∆°n gi√°/km)
        return baseFee.add(distance.multiply(ratePerKm));
    }

    /**
     * L·∫•y h·ªá s·ªë r·ªßi ro d·ª±a tr√™n t√≠nh ch·∫•t h√†ng h√≥a
     */
    private BigDecimal getRiskMultiplier(boolean isFragile) {
        return isFragile ? FRAGILE_MULTIPLIER : NORMAL_MULTIPLIER;
    }

    /**
     * L·∫•y h·ªá s·ªë service type
     */
    private BigDecimal getServiceTypeMultiplier(ServiceType serviceType) {
        return BigDecimal.valueOf(serviceType.getMultiplier());
    }

    /**
     * T·∫°o chu·ªói m√¥ t·∫£ chi ti·∫øt qu√° tr√¨nh t√≠nh to√°n - PHI√äN B·∫¢N ƒê∆†N GI·∫¢N C√ì H·ªÜ S·ªê R·ª¶I RO
     */
    private String buildSimpleCalculationDetails(ShippingCalculationRequest request, 
                                               BigDecimal billableWeight, BigDecimal volumeWeight,
                                               BigDecimal baseFee, BigDecimal riskMultiplier, BigDecimal totalFee) {
        StringBuilder details = new StringBuilder();
        
        details.append("CHI TI·∫æT T√çNH PH√ç SHIPPING ƒê∆†N GI·∫¢N:\n");
        details.append("======================================\n");
        
        // Th√¥ng tin c∆° b·∫£n
        details.append("üì¶ TH√îNG TIN H√ÄNG H√ìA:\n");
        details.append(String.format("- Tr·ªçng l∆∞·ª£ng th·ª±c t·∫ø: %.2f kg\n", request.getActualWeight()));
        details.append(String.format("- Th·ªÉ t√≠ch: %.0f cm¬≥\n", request.getVolume()));
        details.append(String.format("- Tr·ªçng l∆∞·ª£ng quy ƒë·ªïi: %.2f kg\n", volumeWeight));
        details.append(String.format("- Tr·ªçng l∆∞·ª£ng t√≠nh ph√≠: %.2f kg\n", billableWeight));
        details.append(String.format("- H√†ng d·ªÖ v·ª°: %s\n", request.isFragile() ? "C√≥" : "Kh√¥ng"));
        details.append(String.format("- S·ªë l∆∞·ª£ng: %d\n\n", request.getQuantity()));
        
        // T√≠nh ph√≠
        details.append("üí∞ T√çNH PH√ç:\n");
        details.append(String.format("- Ph√≠ c∆° b·∫£n = MAX(%.2f, %.2f) √ó 5,000 = %,.0f VNƒê\n", 
                request.getActualWeight(), volumeWeight, baseFee));
        details.append(String.format("- H·ªá s·ªë r·ªßi ro: %.1f (h√†ng %s)\n", 
                riskMultiplier, request.isFragile() ? "d·ªÖ v·ª°" : "th∆∞·ªùng"));
        details.append(String.format("- Ph√≠ sau h·ªá s·ªë = %,.0f √ó %.1f = %,.0f VNƒê\n", 
                baseFee, riskMultiplier, baseFee.multiply(riskMultiplier)));
        details.append(String.format("- T·ªïng ph√≠ = %,.0f √ó %d = %,.0f VNƒê\n", 
                baseFee.multiply(riskMultiplier), request.getQuantity(), totalFee));
        details.append("\n‚úÖ C√ì h·ªá s·ªë r·ªßi ro");
        details.append("\n‚ùå KH√îNG t√≠nh kho·∫£ng c√°ch");
        details.append("\n‚ùå KH√îNG c√≥ h·ªá s·ªë ServiceType");
        
        return details.toString();
    }

    /**
     * T·∫°o chu·ªói m√¥ t·∫£ chi ti·∫øt qu√° tr√¨nh t√≠nh to√°n - PHI√äN B·∫¢N C≈® (KH√îNG D√ôNG)
     */
    private String buildCalculationDetails(ShippingCalculationRequest request, 
                                         BigDecimal weightFee, BigDecimal distanceFee,
                                         BigDecimal baseFee, BigDecimal riskMultiplier, 
                                         BigDecimal serviceMultiplier, BigDecimal billableWeight,
                                         BigDecimal volumeWeight) {
        StringBuilder details = new StringBuilder();
        
        details.append("CHI TI·∫æT T√çNH PH√ç SHIPPING:\n");
        details.append("==================================\n");
        
        // Th√¥ng tin c∆° b·∫£n
        details.append("üì¶ TH√îNG TIN H√ÄNG H√ìA:\n");
        details.append(String.format("- Tr·ªçng l∆∞·ª£ng th·ª±c t·∫ø: %.2f kg\n", request.getActualWeight()));
        details.append(String.format("- Th·ªÉ t√≠ch: %.0f cm¬≥\n", request.getVolume()));
        details.append(String.format("- Tr·ªçng l∆∞·ª£ng quy ƒë·ªïi: %.2f kg\n", volumeWeight));
        details.append(String.format("- Tr·ªçng l∆∞·ª£ng t√≠nh ph√≠: %.2f kg\n", billableWeight));
        details.append(String.format("- Kho·∫£ng c√°ch: %.2f km\n", request.getDistance()));
        details.append(String.format("- H√†ng d·ªÖ v·ª°: %s\n", request.isFragile() ? "C√≥" : "Kh√¥ng"));
        details.append(String.format("- Lo·∫°i d·ªãch v·ª•: %s\n", request.getServiceType().getDisplayName()));
        details.append(String.format("- S·ªë l∆∞·ª£ng: %d\n\n", request.getQuantity()));
        
        // T√≠nh ph√≠ c∆° b·∫£n
        details.append("üí∞ T√çNH PH√ç C∆† B·∫¢N:\n");
        details.append(String.format("- Ph√≠ theo tr·ªçng l∆∞·ª£ng: %.2f kg √ó 5,000 = %,.0f VNƒê\n", 
                billableWeight, weightFee));
        
        // Chi ti·∫øt ph√≠ kho·∫£ng c√°ch theo c√¥ng th·ª©c ƒë∆°n gi·∫£n
        String zoneType;
        BigDecimal zoneBaseFee;
        BigDecimal ratePerKm;
        BigDecimal distance = request.getDistance();
        
        if (distance.compareTo(new BigDecimal("15")) <= 0) {
            zoneType = "N·ªôi th√†nh";
            zoneBaseFee = INNER_CITY_BASE_FEE;
            ratePerKm = INNER_CITY_RATE_PER_KM;
        } else if (distance.compareTo(new BigDecimal("50")) <= 0) {
            zoneType = "Ngo·∫°i th√†nh";
            zoneBaseFee = SUBURBAN_BASE_FEE;
            ratePerKm = SUBURBAN_RATE_PER_KM;
        } else {
            zoneType = "Li√™n t·ªânh";
            zoneBaseFee = INTER_PROVINCIAL_BASE_FEE;
            ratePerKm = INTER_PROVINCIAL_RATE_PER_KM;
        }
        
        details.append(String.format("- Ph√≠ theo kho·∫£ng c√°ch (%s):\n", zoneType));
        details.append(String.format("  + Ph√≠ c∆° b·∫£n: %,.0f VNƒê\n", zoneBaseFee));
        details.append(String.format("  + Ph√≠ theo km: %.2f km √ó %,.0f VNƒê/km = %,.0f VNƒê\n", 
                distance, ratePerKm, distance.multiply(ratePerKm)));
        details.append(String.format("  ‚Üí T·ªïng ph√≠ kho·∫£ng c√°ch: %,.0f VNƒê\n", distanceFee));
        
        details.append(String.format("- Ph√≠ c∆° b·∫£n = MAX(%,.0f, %,.0f) = %,.0f VNƒê\n\n", 
                weightFee, distanceFee, baseFee));
        
        // H·ªá s·ªë
        details.append("üìä H·ªÜ S·ªê ƒêI·ªÄU CH·ªàNH:\n");
        details.append(String.format("- H·ªá s·ªë r·ªßi ro: %.1f (h√†ng %s)\n", 
                riskMultiplier, request.isFragile() ? "d·ªÖ v·ª°" : "th∆∞·ªùng"));
        details.append(String.format("- H·ªá s·ªë d·ªãch v·ª•: %.1f (%s)\n", 
                serviceMultiplier, request.getServiceType().getDisplayName()));
        
        // T·ªïng ph√≠
        BigDecimal singleItemFee = baseFee.multiply(riskMultiplier).multiply(serviceMultiplier);
        details.append(String.format("\nüßÆ T√çNH T·ªîNG PH√ç:\n"));
        details.append(String.format("- Ph√≠ 1 s·∫£n ph·∫©m: %,.0f √ó %.1f √ó %.1f = %,.0f VNƒê\n", 
                baseFee, riskMultiplier, serviceMultiplier, singleItemFee));
        details.append(String.format("- T·ªïng ph√≠ (%d s·∫£n ph·∫©m): %,.0f √ó %d = %,.0f VNƒê", 
                request.getQuantity(), singleItemFee, request.getQuantity(), 
                singleItemFee.multiply(new BigDecimal(request.getQuantity()))));
        
        return details.toString();
    }

    /**
     * T√≠nh ph√≠ shipping ƒë∆°n gi·∫£n ch·ªâ v·ªõi tr·ªçng l∆∞·ª£ng, th·ªÉ t√≠ch v√† kho·∫£ng c√°ch
     */
    public BigDecimal calculateSimpleShippingFee(BigDecimal weight, BigDecimal volume, BigDecimal distance) {
        ShippingCalculationRequest request = new ShippingCalculationRequest();
        request.setActualWeight(weight);
        request.setVolume(volume);
        request.setDistance(distance);
        request.setFragile(false);
        request.setServiceType(ServiceType.STANDARD);
        request.setQuantity(1);
        
        return calculateShippingFee(request).getTotalFee();
    }
}
