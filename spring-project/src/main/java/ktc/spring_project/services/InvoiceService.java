package ktc.spring_project.services;

import ktc.spring_project.entities.*;
import ktc.spring_project.enums.InvoiceStatus;
import ktc.spring_project.repositories.*;
import jakarta.persistence.EntityNotFoundException;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.File;
import java.io.IOException;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;

/**
 * Service x·ª≠ l√Ω logic nghi·ªáp v·ª• cho h√≥a ƒë∆°n ƒëi·ªán t·ª≠
 * Bao g·ªìm: t·∫°o h√≥a ƒë∆°n, ki·ªÉm tra ƒëi·ªÅu ki·ªán, qu·∫£n l√Ω tr·∫°ng th√°i, v√† t√≠ch h·ª£p v·ªõi h·ªá th·ªëng kh√°c
 */
@Service
@Slf4j
@Transactional
public class InvoiceService {

    @Autowired
    private ElectronicInvoiceRepository invoiceRepository;

    @Autowired
    private OrderRepository orderRepository;

    @Autowired
    private DeliveryRepository deliveryRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private ActivityLogService activityLogService;

    @Autowired
    private EmailService emailService;
    
    @Autowired
    private PdfGenerationService pdfGenerationService;

    // Constants cho business rules
    private static final String INVOICE_NUMBER_PREFIX = "INV";
    
    // C·∫•u h√¨nh t·ª´ application.properties
    @Value("${invoice.expiry.days:180}")
    private int invoiceExpiryDays;

    @Value("${invoice.email.auto.send:false}")
    private boolean autoSendEmail;
    
    @Value("${invoice.pdf.storage.path:/var/invoices/pdfs}")
    private String pdfStoragePath;

    /**
     * Ki·ªÉm tra ƒëi·ªÅu ki·ªán nghi·ªáp v·ª• tr∆∞·ªõc khi xu·∫•t h√≥a ƒë∆°n
     * 
     * @param orderId ID ƒë∆°n h√†ng
     * @return ValidationResult ch·ª©a k·∫øt qu·∫£ ki·ªÉm tra
     */
    public ValidationResult validateInvoiceEligibility(Long orderId) {
        log.info("Ki·ªÉm tra ƒëi·ªÅu ki·ªán xu·∫•t h√≥a ƒë∆°n cho order ID: {}", orderId);

        // 1. Ki·ªÉm tra ƒë∆°n h√†ng t·ªìn t·∫°i
        Optional<Order> orderOpt = orderRepository.findById(orderId);
        if (orderOpt.isEmpty()) {
            return new ValidationResult(false, "ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i");
        }

        Order order = orderOpt.get();

        // 2. Ki·ªÉm tra ƒë∆°n h√†ng ƒë√£ c√≥ h√≥a ƒë∆°n ch∆∞a
        if (invoiceRepository.existsByOrderId(orderId)) {
            return new ValidationResult(false, "ƒê∆°n h√†ng ƒë√£ c√≥ h√≥a ƒë∆°n ƒëi·ªán t·ª≠");
        }

        // 3. Ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng h·ª£p l·ªá
        if (order.getStatus() == null) {
            return new ValidationResult(false, "ƒê∆°n h√†ng ch∆∞a c√≥ tr·∫°ng th√°i");
        }

        // Gi·∫£ s·ª≠ tr·∫°ng th√°i h·ª£p l·ªá l√† PROCESSED ho·∫∑c COMPLETED
        String statusName = order.getStatus().getName();
        if (!isValidOrderStatus(statusName)) {
            return new ValidationResult(false, 
                "Tr·∫°ng th√°i ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá ƒë·ªÉ xu·∫•t h√≥a ƒë∆°n: " + statusName);
        }

        // 4. Ki·ªÉm tra c√≥ b·∫£n ghi giao h√†ng v√† ƒë√£ ho√†n th√†nh
        List<Delivery> deliveries = deliveryRepository.findByOrderId(orderId);
        if (deliveries.isEmpty()) {
            return new ValidationResult(false, "ƒê∆°n h√†ng ch∆∞a c√≥ th√¥ng tin giao h√†ng");
        }

        Delivery delivery = deliveries.get(0); // L·∫•y delivery ƒë·∫ßu ti√™n
        if (delivery.getActualDeliveryTime() == null) {
            return new ValidationResult(false, "ƒê∆°n h√†ng ch∆∞a ho√†n th√†nh giao h√†ng");
        }

        // 5. Ki·ªÉm tra th·ªùi gian xu·∫•t h√≥a ƒë∆°n (theo c·∫•u h√¨nh invoice.expiry.days)
        Timestamp deliveryTime = delivery.getActualDeliveryTime();
        Timestamp now = new Timestamp(System.currentTimeMillis());
        long daysDiff = ChronoUnit.DAYS.between(deliveryTime.toLocalDateTime(), now.toLocalDateTime());
        
        if (daysDiff > invoiceExpiryDays) {
            return new ValidationResult(false, 
                String.format("ƒê√£ qu√° h·∫°n xu·∫•t h√≥a ƒë∆°n (qu√° %d ng√†y t·ª´ khi ho√†n th√†nh giao h√†ng)", 
                invoiceExpiryDays));
        }

        log.info("ƒê∆°n h√†ng {} ƒë·∫°t ƒëi·ªÅu ki·ªán xu·∫•t h√≥a ƒë∆°n", orderId);
        return new ValidationResult(true, "ƒê∆°n h√†ng ƒë·∫°t ƒëi·ªÅu ki·ªán xu·∫•t h√≥a ƒë∆°n");
    }

    /**
     * T·∫°o h√≥a ƒë∆°n ƒëi·ªán t·ª≠ cho ƒë∆°n h√†ng
     * 
     * @param orderId ID ƒë∆°n h√†ng
     * @param createdByUserId ID ng∆∞·ªùi t·∫°o h√≥a ƒë∆°n
     * @param customerEmail Email kh√°ch h√†ng (t√πy ch·ªçn)
     * @param customerName T√™n kh√°ch h√†ng (t√πy ch·ªçn)
     * @return ElectronicInvoice ƒë√£ ƒë∆∞·ª£c t·∫°o
     */
    @Transactional
    public ElectronicInvoice createInvoice(Long orderId, Long createdByUserId, 
                                         String customerEmail, String customerName) {
        log.info("B·∫Øt ƒë·∫ßu t·∫°o h√≥a ƒë∆°n ƒëi·ªán t·ª≠ cho order {}", orderId);

        // 1. Ki·ªÉm tra ƒëi·ªÅu ki·ªán nghi·ªáp v·ª•
        ValidationResult validation = validateInvoiceEligibility(orderId);
        if (!validation.isValid()) {
            throw new IllegalArgumentException("Kh√¥ng th·ªÉ t·∫°o h√≥a ƒë∆°n: " + validation.getMessage());
        }

        // 2. L·∫•y th√¥ng tin ƒë∆°n h√†ng, delivery v√† ng∆∞·ªùi t·∫°o
        Order order = orderRepository.findById(orderId)
            .orElseThrow(() -> new EntityNotFoundException("ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i"));

        List<Delivery> deliveries = deliveryRepository.findByOrderId(orderId);
        if (deliveries.isEmpty()) {
            throw new EntityNotFoundException("Kh√¥ng t√¨m th·∫•y th√¥ng tin giao h√†ng cho ƒë∆°n h√†ng n√†y");
        }
        Delivery delivery = deliveries.get(0); // L·∫•y delivery ƒë·∫ßu ti√™n

        User createdBy = userRepository.findById(createdByUserId)
            .orElseThrow(() -> new EntityNotFoundException("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i"));

        // 3. Sinh s·ªë h√≥a ƒë∆°n duy nh·∫•t
        String invoiceNumber = generateInvoiceNumber();

        // 4. L·∫•y s·ªë ti·ªÅn t·ª´ delivery fee
        BigDecimal totalAmount = delivery.getDeliveryFee();
        if (totalAmount == null) {
            throw new IllegalStateException("Ph√≠ giao h√†ng ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p cho ƒë∆°n h√†ng n√†y");
        }

        // 5. T·∫°o h√≥a ƒë∆°n
        ElectronicInvoice invoice = new ElectronicInvoice(order, delivery, invoiceNumber, totalAmount, createdBy);
        
        // Set th√¥ng tin kh√°ch h√†ng n·∫øu c√≥
        if (customerEmail != null && !customerEmail.isEmpty()) {
            invoice.setCustomerEmail(customerEmail);
        }
        if (customerName != null && !customerName.isEmpty()) {
            invoice.setCustomerName(customerName);
        }

        // 6. T√≠nh thu·∫ø VAT
        invoice.calculateTax();

        // 7. L∆∞u v√†o database
        final ElectronicInvoice savedInvoice = invoiceRepository.save(invoice);

        // 8. T·ª∞ ƒê·ªòNG T·∫†O FILE PDF
        try {
            generateInvoicePdf(savedInvoice.getId());
            log.info("‚úÖ ƒê√£ t·ª± ƒë·ªông t·∫°o PDF cho h√≥a ƒë∆°n {}", invoiceNumber);
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o PDF t·ª± ƒë·ªông cho h√≥a ƒë∆°n {}: {}", invoiceNumber, e.getMessage());
            // Kh√¥ng throw exception ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn vi·ªác t·∫°o h√≥a ƒë∆°n
        }

        // 9. Ghi log ho·∫°t ƒë·ªông
        try {
            activityLogService.logUserActivity(
                createdByUserId,
                "CREATE",
                String.format("T·∫°o h√≥a ƒë∆°n ƒëi·ªán t·ª≠ %s cho ƒë∆°n h√†ng %d", 
                    invoiceNumber, orderId)
            );
        } catch (Exception e) {
            log.warn("Kh√¥ng th·ªÉ ghi log cho vi·ªác t·∫°o h√≥a ƒë∆°n: {}", e.getMessage());
        }

        // 10. T·ª∞ ƒê·ªòNG G·ª¨I EMAIL n·∫øu ƒë∆∞·ª£c b·∫≠t v√† c√≥ email kh√°ch h√†ng
        if (autoSendEmail && customerEmail != null && !customerEmail.trim().isEmpty()) {
            log.info("üîÑ T·ª± ƒë·ªông g·ª≠i email cho h√≥a ƒë∆°n {} ƒë·∫øn {}", invoiceNumber, customerEmail);
            
            // G·ª≠i email async ƒë·ªÉ kh√¥ng block process t·∫°o h√≥a ƒë∆°n
            CompletableFuture.runAsync(() -> {
                try {
                    // ƒê·ª£i 1 gi√¢y ƒë·ªÉ ƒë·∫£m b·∫£o transaction ƒë√£ commit
                    Thread.sleep(1000);
                    
                    boolean emailSent = emailService.sendInvoiceEmail(savedInvoice, customerEmail);
                    
                    if (emailSent) {
                        // C·∫≠p nh·∫≠t tr·∫°ng th√°i email ƒë√£ g·ª≠i
                        savedInvoice.markAsSent(customerEmail);
                        invoiceRepository.save(savedInvoice);
                        
                        log.info("‚úÖ ƒê√£ t·ª± ƒë·ªông g·ª≠i email th√†nh c√¥ng cho h√≥a ƒë∆°n {}", invoiceNumber);
                    } else {
                        log.warn("‚ö†Ô∏è T·ª± ƒë·ªông g·ª≠i email th·∫•t b·∫°i cho h√≥a ƒë∆°n {}", invoiceNumber);
                    }
                } catch (Exception e) {
                    log.error("üö® L·ªói khi t·ª± ƒë·ªông g·ª≠i email cho h√≥a ƒë∆°n {}: ", invoiceNumber, e);
                }
            });
        }

        log.info("ƒê√£ t·∫°o th√†nh c√¥ng h√≥a ƒë∆°n {} cho ƒë∆°n h√†ng {}", invoiceNumber, orderId);
        return savedInvoice;
    }

    /**
     * T·∫°o file PDF cho h√≥a ƒë∆°n
     * 
     * @param invoiceId ID h√≥a ƒë∆°n
     * @return ƒë∆∞·ªùng d·∫´n file PDF ƒë√£ t·∫°o
     */
    @Transactional
    public String generateInvoicePdf(Long invoiceId) {
        log.info("T·∫°o file PDF cho h√≥a ƒë∆°n ID: {}", invoiceId);

        ElectronicInvoice invoice = getInvoiceById(invoiceId);
        
        // Sinh t√™n file PDF 
        String fileName = invoice.generatePdfFileName();
        String filePath = "invoices/pdfs/" + fileName;

        // T·∫°o th∆∞ m·ª•c l∆∞u tr·ªØ n·∫øu ch∆∞a c√≥
        File storageDir = new File(pdfStoragePath);
        if (!storageDir.exists()) {
            boolean created = storageDir.mkdirs();
            if (created) {
                log.info("ƒê√£ t·∫°o th∆∞ m·ª•c l∆∞u PDF: {}", pdfStoragePath);
            }
        }
        
        // T·∫°o file PDF th·∫≠t s·ª± b·∫±ng OpenPDF
        File pdfFile = new File(pdfStoragePath, fileName);
        try {
            pdfGenerationService.generatePdfFromInvoice(invoice, pdfFile);
            log.info("‚úÖ ƒê√£ t·∫°o file PDF th·∫≠t s·ª±: {}", pdfFile.getAbsolutePath());
        } catch (IOException e) {
            log.error("‚ùå L·ªói t·∫°o file PDF cho h√≥a ƒë∆°n {}: ", invoice.getInvoiceNumber(), e);
            throw new RuntimeException("Kh√¥ng th·ªÉ t·∫°o file PDF: " + e.getMessage());
        }
        
        // C·∫≠p nh·∫≠t th√¥ng tin file trong database
        invoice.setPdfFileName(fileName);
        invoice.setPdfFilePath(filePath);
        invoiceRepository.save(invoice);

        log.info("ƒê√£ t·∫°o file PDF: {} cho h√≥a ƒë∆°n {}", filePath, invoice.getInvoiceNumber());
        return filePath;
    }

    /**
     * G·ª≠i h√≥a ƒë∆°n qua email (MANUAL TRIGGER t·ª´ API)
     * 
     * @param invoiceId ID h√≥a ƒë∆°n
     * @param emailAddress ƒë·ªãa ch·ªâ email nh·∫≠n
     */
    @Transactional
    public void sendInvoiceByEmail(Long invoiceId, String emailAddress) {
        log.info("üìß MANUAL: G·ª≠i h√≥a ƒë∆°n ID {} qua email: {}", invoiceId, emailAddress);

        ElectronicInvoice invoice = getInvoiceById(invoiceId);

        if (invoice.getInvoiceStatus() == InvoiceStatus.CANCELLED) {
            throw new IllegalStateException("Kh√¥ng th·ªÉ g·ª≠i h√≥a ƒë∆°n ƒë√£ b·ªã h·ªßy");
        }

        // G·ª¨I EMAIL TH·ª∞C S·ª∞ th√¥ng qua EmailService
        boolean emailSent = emailService.sendInvoiceEmail(invoice, emailAddress);
        
        if (!emailSent) {
            throw new RuntimeException("Kh√¥ng th·ªÉ g·ª≠i email h√≥a ƒë∆°n. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh email.");
        }
        
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√£ g·ª≠i ch·ªâ khi email th√†nh c√¥ng
        invoice.markAsSent(emailAddress);
        invoiceRepository.save(invoice);

        // Ghi log
        try {
            activityLogService.logUserActivity(
                invoice.getCreatedBy().getId(),
                "UPDATE",
                String.format("G·ª≠i h√≥a ƒë∆°n %s qua email %s", 
                    invoice.getInvoiceNumber(), emailAddress)
            );
        } catch (Exception e) {
            log.warn("Kh√¥ng th·ªÉ ghi log cho vi·ªác g·ª≠i h√≥a ƒë∆°n: {}", e.getMessage());
        }

        log.info("‚úÖ MANUAL: ƒê√£ g·ª≠i th√†nh c√¥ng h√≥a ƒë∆°n {} qua email {}", 
            invoice.getInvoiceNumber(), emailAddress);
    }

    /**
     * H·ªßy h√≥a ƒë∆°n
     * 
     * @param invoiceId ID h√≥a ƒë∆°n
     * @param cancelledByUserId ID ng∆∞·ªùi h·ªßy
     * @param reason l√Ω do h·ªßy
     */
    @Transactional
    public void cancelInvoice(Long invoiceId, Long cancelledByUserId, String reason) {
        log.info("H·ªßy h√≥a ƒë∆°n ID {} b·ªüi user {}, l√Ω do: {}", invoiceId, cancelledByUserId, reason);

        ElectronicInvoice invoice = getInvoiceById(invoiceId);
        User cancelledBy = userRepository.findById(cancelledByUserId)
            .orElseThrow(() -> new EntityNotFoundException("Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i"));

        invoice.cancel(cancelledBy, reason);
        invoiceRepository.save(invoice);

        // Ghi log
        try {
            activityLogService.logUserActivity(
                cancelledByUserId,
                "DELETE",
                String.format("H·ªßy h√≥a ƒë∆°n %s, l√Ω do: %s", 
                    invoice.getInvoiceNumber(), reason)
            );
        } catch (Exception e) {
            log.warn("Kh√¥ng th·ªÉ ghi log cho vi·ªác h·ªßy h√≥a ƒë∆°n: {}", e.getMessage());
        }

        log.info("ƒê√£ h·ªßy h√≥a ƒë∆°n {}", invoice.getInvoiceNumber());
    }

    /**
     * L·∫•y danh s√°ch ƒë∆°n h√†ng c·∫ßn xu·∫•t h√≥a ƒë∆°n (job t·ª± ƒë·ªông)
     * 
     * @return List<Order> c√°c ƒë∆°n h√†ng c·∫ßn xu·∫•t h√≥a ƒë∆°n
     */
    public List<Order> getOrdersNeedingInvoice() {
        // T√¨m c√°c ƒë∆°n h√†ng ho√†n th√†nh giao h√†ng > 3 ng√†y nh∆∞ng ch∆∞a c√≥ h√≥a ƒë∆°n
        LocalDateTime cutoffDate = LocalDateTime.now().minusDays(3);
        Timestamp cutoffTimestamp = Timestamp.valueOf(cutoffDate);
        
        return invoiceRepository.findOrdersNeedingInvoice(cutoffTimestamp);
    }

    /**
     * L·∫•y h√≥a ƒë∆°n theo ID
     */
    public ElectronicInvoice getInvoiceById(Long id) {
        return invoiceRepository.findById(id)
            .orElseThrow(() -> new EntityNotFoundException("H√≥a ƒë∆°n kh√¥ng t·ªìn t·∫°i v·ªõi ID: " + id));
    }

    /**
     * L·∫•y h√≥a ƒë∆°n theo ƒë∆°n h√†ng
     */
    public Optional<ElectronicInvoice> getInvoiceByOrderId(Long orderId) {
        return invoiceRepository.findByOrderId(orderId);
    }

    /**
     * L·∫•y danh s√°ch h√≥a ƒë∆°n theo tr·∫°ng th√°i
     */
    public List<ElectronicInvoice> getInvoicesByStatus(InvoiceStatus status) {
        return invoiceRepository.findByStatusOrderByIssuedAtDesc(status);
    }

    // ============ PRIVATE HELPER METHODS ============

    /**
     * Ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng c√≥ h·ª£p l·ªá ƒë·ªÉ xu·∫•t h√≥a ƒë∆°n kh√¥ng
     */
    private boolean isValidOrderStatus(String statusName) {
        return "PROCESSED".equalsIgnoreCase(statusName) || 
               "COMPLETED".equalsIgnoreCase(statusName);
    }

    /**
     * Sinh s·ªë h√≥a ƒë∆°n duy nh·∫•t
     */
    private String generateInvoiceNumber() {
        // Format: INV-YYYYMMDD-HHMMSS-XXX
        LocalDateTime now = LocalDateTime.now();
        String timestamp = now.format(java.time.format.DateTimeFormatter.ofPattern("yyyyMMdd-HHmmss"));
        
        // Th√™m s·ªë sequence ƒë·ªÉ ƒë·∫£m b·∫£o duy nh·∫•t
        long count = invoiceRepository.count() + 1;
        String sequence = String.format("%03d", count % 1000);
        
        return String.format("%s-%s-%s", INVOICE_NUMBER_PREFIX, timestamp, sequence);
    }

    /**
     * T√≠nh t·ªïng s·ªë ti·ªÅn h√≥a ƒë∆°n t·ª´ ƒë∆°n h√†ng (DEPRECATED: Gi·ªù s·ª≠ d·ª•ng delivery fee)
     */
    @Deprecated
    private BigDecimal calculateTotalAmount(Order order) {
        BigDecimal totalAmount = order.getTotalAmount();
        
        if (totalAmount == null || totalAmount.compareTo(BigDecimal.ZERO) <= 0) {
            throw new IllegalArgumentException("ƒê∆°n h√†ng kh√¥ng c√≥ gi√° tr·ªã h·ª£p l·ªá");
        }
        
        return totalAmount;
    }
    


    // ============ INNER CLASSES ============

    /**
     * Class ch·ª©a k·∫øt qu·∫£ validation
     */
    public static class ValidationResult {
        private final boolean valid;
        private final String message;

        public ValidationResult(boolean valid, String message) {
            this.valid = valid;
            this.message = message;
        }

        public boolean isValid() { return valid; }
        public String getMessage() { return message; }
    }
}
