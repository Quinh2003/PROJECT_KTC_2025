package ktc.spring_project.services;

import ktc.spring_project.entities.ElectronicInvoice;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import com.lowagie.text.*;
import com.lowagie.text.pdf.*;

import java.io.*;
import java.awt.Color;
import java.math.BigDecimal;

/**
 * Service ƒë·ªÉ t·∫°o file PDF th·∫≠t s·ª± t·ª´ d·ªØ li·ªáu h√≥a ƒë∆°n
 * S·ª≠ d·ª•ng OpenPDF (iText) ƒë·ªÉ t·∫°o PDF t·ª´ d·ªØ li·ªáu c·∫•u tr√∫c
 */
@Service
@Slf4j
public class PdfGenerationService {

    /**
     * T·∫°o file PDF th·∫≠t s·ª± t·ª´ d·ªØ li·ªáu h√≥a ƒë∆°n b·∫±ng OpenPDF
     * 
     * @param invoice H√≥a ƒë∆°n c·∫ßn t·∫°o PDF
     * @param outputFile File output ƒë·ªÉ l∆∞u PDF
     * @throws IOException n·∫øu c√≥ l·ªói t·∫°o file
     */
    public void generatePdfFromInvoice(ElectronicInvoice invoice, File outputFile) throws IOException {
        try {
            log.info("üîÑ B·∫Øt ƒë·∫ßu t·∫°o PDF th·∫≠t s·ª± cho h√≥a ƒë∆°n {}", invoice.getInvoiceNumber());
            
            // T·∫°o PDF Document
            Document document = new Document(PageSize.A4, 50, 50, 50, 50);
            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(outputFile));
            document.open();
            
            // Th√™m content v√†o PDF
            addInvoiceContentToPdf(document, invoice);
            
            document.close();
            writer.close();
            
            log.info("‚úÖ ƒê√£ t·∫°o PDF th√†nh c√¥ng: {} (size: {} KB)", 
                outputFile.getName(), outputFile.length() / 1024);
                
        } catch (Exception e) {
            log.error("‚ùå L·ªói khi t·∫°o PDF cho h√≥a ƒë∆°n {}: ", invoice.getInvoiceNumber(), e);
            throw new IOException("Kh√¥ng th·ªÉ t·∫°o file PDF: " + e.getMessage(), e);
        }
    }
    
    /**
     * Th√™m n·ªôi dung h√≥a ƒë∆°n v√†o PDF document
     */
    private void addInvoiceContentToPdf(Document document, ElectronicInvoice invoice) throws DocumentException {
        // Font cho ti·∫øng Vi·ªát
        Font titleFont = new Font(Font.HELVETICA, 18, Font.BOLD, Color.BLUE);
        Font headerFont = new Font(Font.HELVETICA, 14, Font.BOLD, Color.RED);
        Font normalFont = new Font(Font.HELVETICA, 12, Font.NORMAL);
        Font boldFont = new Font(Font.HELVETICA, 12, Font.BOLD);
        
        // Title
        Paragraph title = new Paragraph("H√ìA ƒê∆†N THANH TO√ÅN", titleFont);
        title.setAlignment(Element.ALIGN_CENTER);
        document.add(title);
        
        Paragraph company = new Paragraph("KTC LOGISTICS", headerFont);
        company.setAlignment(Element.ALIGN_CENTER);
        document.add(company);
        
        document.add(new Paragraph(" ")); // Kho·∫£ng tr·ªëng
        
        // Th√¥ng tin h√≥a ƒë∆°n
        Table infoTable = new Table(2);
        infoTable.setWidth(100);
        infoTable.setBorderWidth(1);
        infoTable.setBorderColor(Color.GRAY);
        infoTable.setPadding(5);
        infoTable.setSpacing(0);
        
        infoTable.addCell(new Cell(new Phrase("S·ªë h√≥a ƒë∆°n:", boldFont)));
        infoTable.addCell(new Cell(new Phrase(invoice.getInvoiceNumber(), normalFont)));
        
        infoTable.addCell(new Cell(new Phrase("Ng√†y xu·∫•t:", boldFont)));
        infoTable.addCell(new Cell(new Phrase(invoice.getIssuedAt().toString(), normalFont)));
        
        infoTable.addCell(new Cell(new Phrase("M√£ ƒë∆°n h√†ng:", boldFont)));
        infoTable.addCell(new Cell(new Phrase(invoice.getOrder().getId().toString(), normalFont)));
        
        infoTable.addCell(new Cell(new Phrase("M√£ v·∫≠n ƒë∆°n:", boldFont)));
        infoTable.addCell(new Cell(new Phrase(invoice.getDelivery().getId().toString(), normalFont)));
        
        if (invoice.getCustomerName() != null && !invoice.getCustomerName().trim().isEmpty()) {
            infoTable.addCell(new Cell(new Phrase("Kh√°ch h√†ng:", boldFont)));
            infoTable.addCell(new Cell(new Phrase(invoice.getCustomerName(), normalFont)));
        }
        
        if (invoice.getCustomerEmail() != null && !invoice.getCustomerEmail().trim().isEmpty()) {
            infoTable.addCell(new Cell(new Phrase("Email:", boldFont)));
            infoTable.addCell(new Cell(new Phrase(invoice.getCustomerEmail(), normalFont)));
        }
        
        document.add(infoTable);
        document.add(new Paragraph(" ")); // Kho·∫£ng tr·ªëng
        
        // Chi ti·∫øt h√≥a ƒë∆°n
        Paragraph detailTitle = new Paragraph("Chi ti·∫øt h√≥a ƒë∆°n:", boldFont);
        document.add(detailTitle);
        document.add(new Paragraph(" "));
        
        Table detailTable = new Table(2);
        detailTable.setWidth(100);
        detailTable.setBorderWidth(1);
        detailTable.setBorderColor(Color.GRAY);
        detailTable.setPadding(5);
        detailTable.setSpacing(0);
        
        // Header
        Cell headerCell1 = new Cell(new Phrase("M√¥ t·∫£", boldFont));
        headerCell1.setBackgroundColor(Color.LIGHT_GRAY);
        detailTable.addCell(headerCell1);
        
        Cell headerCell2 = new Cell(new Phrase("S·ªë ti·ªÅn", boldFont));
        headerCell2.setBackgroundColor(Color.LIGHT_GRAY);
        detailTable.addCell(headerCell2);
        
        // T·ªïng gi√° tr·ªã (l·∫•y t·ª´ delivery fee)
        detailTable.addCell(new Cell(new Phrase("T·ªïng gi√° tr·ªã ƒë∆°n h√†ng", normalFont)));
        detailTable.addCell(new Cell(new Phrase(formatCurrency(invoice.getDelivery().getDeliveryFee()), normalFont)));
        
        // Thu·∫ø VAT n·∫øu c√≥
        if (invoice.getTaxAmount() != null && invoice.getTaxAmount().compareTo(BigDecimal.ZERO) > 0) {
            detailTable.addCell(new Cell(new Phrase("Thu·∫ø VAT (10%)", normalFont)));
            detailTable.addCell(new Cell(new Phrase(formatCurrency(invoice.getTaxAmount()), normalFont)));
            
            // Th√†nh ti·ªÅn
            Cell totalLabelCell = new Cell(new Phrase("Th√†nh ti·ªÅn", boldFont));
            totalLabelCell.setBackgroundColor(new Color(232, 245, 232));
            detailTable.addCell(totalLabelCell);
            
            Cell totalAmountCell = new Cell(new Phrase(formatCurrency(invoice.getNetAmount()), boldFont));
            totalAmountCell.setBackgroundColor(new Color(232, 245, 232));
            detailTable.addCell(totalAmountCell);
        }
        
        document.add(detailTable);
        document.add(new Paragraph(" "));
        
        // Ghi ch√∫
        if (invoice.getNotes() != null && !invoice.getNotes().trim().isEmpty()) {
            Paragraph notes = new Paragraph("Ghi ch√∫: " + invoice.getNotes(), normalFont);
            document.add(notes);
            document.add(new Paragraph(" "));
        }
        
        // Footer
        Paragraph footer1 = new Paragraph("H√≥a ƒë∆°n thanh to√°n ƒë∆∞·ª£c xu·∫•t t·ª´ h·ªá th·ªëng KTC Logistics", normalFont);
        footer1.setAlignment(Element.ALIGN_CENTER);
        document.add(footer1);
        
        Paragraph footer2 = new Paragraph("C·∫£m ∆°n qu√Ω kh√°ch ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i!", normalFont);
        footer2.setAlignment(Element.ALIGN_CENTER);
        document.add(footer2);
    }

    
    /**
     * Format ti·ªÅn t·ªá
     */
    private String formatCurrency(BigDecimal amount) {
        if (amount == null) return "0 VND";
        return String.format("%,.0f VND", amount);
    }

}
