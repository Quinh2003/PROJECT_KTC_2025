package ktc.spring_project.services;

import ktc.spring_project.entities.ElectronicInvoice;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.FileSystemResource;
import org.springframework.stereotype.Service;

// Email imports - s·∫Ω ƒë∆∞·ª£c resolve sau khi dependencies load
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;

// Thymeleaf imports cho template engine
import org.thymeleaf.TemplateEngine;
import org.thymeleaf.context.Context;

// Jakarta Mail imports
import jakarta.mail.MessagingException;
import jakarta.mail.internet.MimeMessage;
import java.io.File;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.time.format.DateTimeFormatter;
import java.util.concurrent.CompletableFuture;

/**
 * Service x·ª≠ l√Ω g·ª≠i email h√≥a ƒë∆°n ƒëi·ªán t·ª≠
 * 
 * Ch·ª©c nƒÉng ch√≠nh:
 * - G·ª≠i email h√≥a ƒë∆°n c√≥ attachment PDF
 * - S·ª≠ d·ª•ng HTML template ƒë·∫πp m·∫Øt
 * - H·ªó tr·ª£ g·ª≠i email async ƒë·ªÉ kh√¥ng block UI
 * - X·ª≠ l√Ω l·ªói v√† logging chi ti·∫øt
 */
@Service
@Slf4j
public class EmailService {

    @Autowired
    private JavaMailSender mailSender;

    @Autowired
    private TemplateEngine templateEngine;

    // ============ C·∫§U H√åNH EMAIL T·ª™ APPLICATION.PROPERTIES ============
    
    @Value("${invoice.email.from:noreply@ktc-logistics.com}")
    private String fromEmail;

    @Value("${invoice.email.enabled:true}")
    private boolean emailEnabled;

    @Value("${invoice.email.subject.prefix:KTC Logistics - }")
    private String subjectPrefix;

    @Value("${invoice.pdf.storage.path:/var/invoices/pdfs}")
    private String pdfStoragePath;

    // ============ TH√îNG TIN C√îNG TY ============
    
    @Value("${company.name:KTC Logistics}")
    private String companyName;

    @Value("${company.phone:+84-915-101-664}")
    private String companyPhone;

    @Value("${company.email:support@ktc-logistics.com}")
    private String companyEmail;

    @Value("${company.website:https://ktc-logistics.com}")
    private String companyWebsite;

    @Value("${company.address: 32 Phi Binh 8, Ngu Hanh Son, Da Nang}")
    private String companyAddress;

    /**
     * G·ª≠i email h√≥a ƒë∆°n ƒëi·ªán t·ª≠ (ASYNC - kh√¥ng block UI)
     * 
     * @param invoice H√≥a ƒë∆°n c·∫ßn g·ª≠i
     * @param recipientEmail Email ng∆∞·ªùi nh·∫≠n
     * @return CompletableFuture<Boolean> - true n·∫øu g·ª≠i th√†nh c√¥ng
     */
    public CompletableFuture<Boolean> sendInvoiceEmailAsync(ElectronicInvoice invoice, String recipientEmail) {
        return CompletableFuture.supplyAsync(() -> {
            try {
                log.info("B·∫Øt ƒë·∫ßu g·ª≠i email ASYNC cho h√≥a ƒë∆°n {} ƒë·∫øn {}", 
                    invoice.getInvoiceNumber(), recipientEmail);
                
                boolean result = sendInvoiceEmail(invoice, recipientEmail);
                
                if (result) {
                    log.info("‚úÖ G·ª≠i email ASYNC th√†nh c√¥ng cho h√≥a ƒë∆°n {}", invoice.getInvoiceNumber());
                } else {
                    log.error("‚ùå G·ª≠i email ASYNC th·∫•t b·∫°i cho h√≥a ƒë∆°n {}", invoice.getInvoiceNumber());
                }
                
                return result;
                
            } catch (Exception e) {
                log.error("üö® L·ªói khi g·ª≠i email ASYNC cho h√≥a ƒë∆°n {}: ", invoice.getInvoiceNumber(), e);
                return false;
            }
        });
    }

    /**
     * G·ª≠i email h√≥a ƒë∆°n ƒëi·ªán t·ª≠ (SYNC - block until complete)
     * 
     * @param invoice H√≥a ƒë∆°n c·∫ßn g·ª≠i
     * @param recipientEmail Email ng∆∞·ªùi nh·∫≠n
     * @return true n·∫øu g·ª≠i th√†nh c√¥ng
     */
    public boolean sendInvoiceEmail(ElectronicInvoice invoice, String recipientEmail) {
        // Ki·ªÉm tra email service c√≥ ƒë∆∞·ª£c b·∫≠t kh√¥ng
        if (!emailEnabled) {
            log.warn("‚ö†Ô∏è Email service ƒë√£ b·ªã DISABLE, b·ªè qua g·ª≠i email cho h√≥a ƒë∆°n {}", 
                invoice.getInvoiceNumber());
            return false;
        }

        // Validate input
        if (invoice == null || recipientEmail == null || recipientEmail.trim().isEmpty()) {
            log.error("‚ùå D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá: invoice={}, email={}", 
                invoice, recipientEmail);
            return false;
        }

        try {
            log.info("üìß B·∫Øt ƒë·∫ßu g·ª≠i email h√≥a ƒë∆°n {} ƒë·∫øn {}", 
                invoice.getInvoiceNumber(), recipientEmail);

            // B∆∞·ªõc 1: T·∫°o email message
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, true, "UTF-8");

            // B∆∞·ªõc 2: Set th√¥ng tin email c∆° b·∫£n
            helper.setFrom(fromEmail);
            helper.setTo(recipientEmail.trim());
            helper.setSubject(subjectPrefix + "H√≥a ƒë∆°n ƒëi·ªán t·ª≠ " + invoice.getInvoiceNumber());

            // B∆∞·ªõc 3: T·∫°o HTML content t·ª´ template
            String htmlContent = generateEmailContent(invoice);
            helper.setText(htmlContent, true); // true = HTML content

            // B∆∞·ªõc 4: Attach PDF file n·∫øu c√≥
            attachPdfFileIfExists(helper, invoice);

            // B∆∞·ªõc 5: G·ª≠i email
            mailSender.send(message);
            
            log.info("‚úÖ ƒê√£ g·ª≠i TH√ÄNH C√îNG email h√≥a ƒë∆°n {} ƒë·∫øn {}", 
                invoice.getInvoiceNumber(), recipientEmail);
            return true;

        } catch (MessagingException e) {
            log.error("‚ùå L·ªói MessagingException khi g·ª≠i email h√≥a ƒë∆°n {}: ", 
                invoice.getInvoiceNumber(), e);
            return false;
            
        } catch (Exception e) {
            log.error("üö® L·ªói kh√¥ng x√°c ƒë·ªãnh khi g·ª≠i email h√≥a ƒë∆°n {}: ", 
                invoice.getInvoiceNumber(), e);
            return false;
        }
    }

    /**
     * Attach file PDF v√†o email n·∫øu file t·ªìn t·∫°i
     */
    private void attachPdfFileIfExists(MimeMessageHelper helper, ElectronicInvoice invoice) 
            throws MessagingException {
        
        if (invoice.getPdfFilePath() == null || invoice.getPdfFilePath().isEmpty()) {
            log.info("üìÑ Kh√¥ng c√≥ file PDF ƒë·ªÉ attach cho h√≥a ƒë∆°n {}", invoice.getInvoiceNumber());
            return;
        }

        // T·∫°o ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi ƒë·∫øn file PDF
        File pdfFile = new File(pdfStoragePath, invoice.getPdfFileName());
        
        if (pdfFile.exists() && pdfFile.isFile()) {
            FileSystemResource fileResource = new FileSystemResource(pdfFile);
            helper.addAttachment(invoice.getPdfFileName(), fileResource);
            
            log.info("üìé ƒê√£ attach file PDF: {} (size: {} KB)", 
                invoice.getPdfFileName(), pdfFile.length() / 1024);
        } else {
            log.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file PDF: {}", pdfFile.getAbsolutePath());
        }
    }

    /**
     * T·∫°o HTML content cho email t·ª´ Thymeleaf template
     * 
     * @param invoice H√≥a ƒë∆°n
     * @return HTML content
     */
    private String generateEmailContent(ElectronicInvoice invoice) {
        try {
            Context context = new Context();
            
            // ============ TH√îNG TIN H√ìA ƒê∆†N ============
            context.setVariable("invoiceNumber", invoice.getInvoiceNumber());
            context.setVariable("customerName", 
                invoice.getCustomerName() != null ? invoice.getCustomerName() : "Qu√Ω kh√°ch");
            context.setVariable("totalAmount", formatCurrency(invoice.getTotalAmount()));
            context.setVariable("taxAmount", formatCurrency(invoice.getTaxAmount()));
            context.setVariable("netAmount", formatCurrency(invoice.getNetAmount()));
            context.setVariable("issuedDate", formatDate(invoice.getIssuedAt()));
            
            // ============ TH√îNG TIN ƒê∆†N H√ÄNG ============
            if (invoice.getOrder() != null) {
                context.setVariable("orderId", invoice.getOrder().getId());
                context.setVariable("orderDescription", 
                    invoice.getOrder().getDescription() != null ? 
                    invoice.getOrder().getDescription() : "ƒê∆°n h√†ng logistics");
            } else {
                context.setVariable("orderId", "N/A");
                context.setVariable("orderDescription", "Th√¥ng tin ƒë∆°n h√†ng kh√¥ng c√≥");
            }
            
            // ============ TH√îNG TIN C√îNG TY ============
            context.setVariable("companyName", companyName);
            context.setVariable("companyPhone", companyPhone);
            context.setVariable("companyEmail", companyEmail);
            context.setVariable("companyWebsite", companyWebsite);
            context.setVariable("companyAddress", companyAddress);
            
            // ============ TH√îNG TIN KH√ÅC ============
            context.setVariable("hasPdfAttachment", 
                invoice.getPdfFilePath() != null && !invoice.getPdfFilePath().isEmpty());
            context.setVariable("currentYear", java.time.LocalDate.now().getYear());
            context.setVariable("invoiceStatusDisplay", invoice.getInvoiceStatus().getDisplayName());

            // Render template th√†nh HTML
            return templateEngine.process("invoice-email", context);
            
        } catch (Exception e) {
            log.error("‚ùå L·ªói khi t·∫°o HTML content cho email: ", e);
            
            // Fallback: T·∫°o email ƒë∆°n gi·∫£n n·∫øu template l·ªói
            return createFallbackEmailContent(invoice);
        }
    }

    /**
     * T·∫°o email content ƒë∆°n gi·∫£n khi template b·ªã l·ªói
     */
    private String createFallbackEmailContent(ElectronicInvoice invoice) {
        StringBuilder sb = new StringBuilder();
        sb.append("<html><body>");
        sb.append("<h2>H√≥a ƒë∆°n ƒëi·ªán t·ª≠ ").append(companyName).append("</h2>");
        sb.append("<p>K√≠nh ch√†o ").append(invoice.getCustomerName() != null ? 
            invoice.getCustomerName() : "Qu√Ω kh√°ch").append(",</p>");
        sb.append("<p>Ch√∫ng t√¥i g·ª≠i ƒë·∫øn Qu√Ω kh√°ch h√≥a ƒë∆°n ƒëi·ªán t·ª≠:</p>");
        sb.append("<ul>");
        sb.append("<li><strong>S·ªë h√≥a ƒë∆°n:</strong> ").append(invoice.getInvoiceNumber()).append("</li>");
        sb.append("<li><strong>T·ªïng ti·ªÅn:</strong> ").append(formatCurrency(invoice.getTotalAmount())).append("</li>");
        sb.append("</ul>");
        sb.append("<p>Tr√¢n tr·ªçng,<br>").append(companyName).append("</p>");
        sb.append("</body></html>");
        
        return sb.toString();
    }

    /**
     * Ki·ªÉm tra email service c√≥ ho·∫°t ƒë·ªông kh√¥ng
     */
    public boolean isEmailServiceAvailable() {
        return emailEnabled && mailSender != null;
    }

    /**
     * G·ª≠i email test ƒë·ªÉ ki·ªÉm tra c·∫•u h√¨nh
     */
    public boolean sendTestEmail(String testEmail) {
        if (!emailEnabled) {
            log.warn("Email service ƒë√£ b·ªã disable");
            return false;
        }

        try {
            MimeMessage message = mailSender.createMimeMessage();
            MimeMessageHelper helper = new MimeMessageHelper(message, false, "UTF-8");

            helper.setFrom(fromEmail);
            helper.setTo(testEmail);
            helper.setSubject("Test Email - KTC Logistics System");
            helper.setText("ƒê√¢y l√† email test t·ª´ h·ªá th·ªëng KTC Logistics. N·∫øu b·∫°n nh·∫≠n ƒë∆∞·ª£c email n√†y, " +
                "c·∫•u h√¨nh email ƒë√£ ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng.", false);

            mailSender.send(message);
            log.info("‚úÖ G·ª≠i test email th√†nh c√¥ng ƒë·∫øn {}", testEmail);
            return true;

        } catch (Exception e) {
            log.error("‚ùå L·ªói khi g·ª≠i test email: ", e);
            return false;
        }
    }

    // ============ HELPER METHODS ============

    /**
     * Format ti·ªÅn t·ªá Vi·ªát Nam
     */
    private String formatCurrency(BigDecimal amount) {
        if (amount == null) return "0 VND";
        DecimalFormat formatter = new DecimalFormat("#,##0.00");
        return formatter.format(amount) + " VND";
    }

    /**
     * Format ng√†y th√°ng theo ƒë·ªãnh d·∫°ng Vi·ªát Nam
     */
    private String formatDate(java.sql.Timestamp timestamp) {
        if (timestamp == null) return "";
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy 'l√∫c' HH:mm");
        return timestamp.toLocalDateTime().format(formatter);
    }
}
